# Dockerfile

# Stage 1: Build the application
# Use the official Node.js 20 image as the base image for building
FROM node:20.9.0-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
COPY package.json ./
# Use npm ci for reproducible installs based on lock file
# If package-lock.json doesn't exist, this will fail. Use npm install first if needed.
COPY package-lock.json ./
RUN npm ci --ignore-scripts

# Copy the rest of the application code
COPY . .

# Build the Next.js application for production
# This command needs package.json scripts.build to be defined
RUN npm run build

# Stage 2: Create the final production image
# Use a smaller Node.js image for the production environment
FROM node:20.9.0-alpine

# Set the working directory
WORKDIR /app

# Set environment variable to production
ENV NODE_ENV production
# Prevent Next.js telemetry
ENV NEXT_TELEMETRY_DISABLED 1

# Copy necessary files from the builder stage
# Copy the standalone Next.js server output
COPY --from=builder /app/.next/standalone ./
# Copy the static assets generated by the build
COPY --from=builder /app/.next/static ./.next/static
# Copy the public directory if it exists (REMOVED THIS LINE)
# COPY --from=builder /app/public ./public

# Expose the port the app runs on (default 3000 for Next.js production)
EXPOSE 3000

# Command to run the application using the standalone server
# Note: Uses hostname 0.0.0.0 to accept connections from outside the container
CMD ["node", "server.js"]
